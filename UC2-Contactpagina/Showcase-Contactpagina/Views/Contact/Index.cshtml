@model Contactform
@{
    ViewData["Title"] = "Contactpagina";
}

<head>
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
</head>

<div class="page">
    <section class="contact">

        <h1>Contact</h1>
        <p>@ViewBag.Message</p>
        <form method="post" class="form-contactpagina">

            <div class="form-contactpagina__inputelement fx-col">
                <label for="email">E-mailadres: </label>
                <input type="email" asp-for="Email" name="email" id="email" required>
            </div>

            <div class="form-contactpagina__inputelement fx-col">
                <label for="subject">Onderwerp: </label>
                <textarea asp-for="Subject" name="subject" id="subject" rows="2" cols="40" required></textarea>
            </div>

            <div class="form-contactpagina__inputelement fx-col">
                <label for="message">Bericht: </label>
                <textarea asp-for="Message" name="message" id="message" rows="5" cols="40" required></textarea>
            </div>

            <div class="g-recaptcha" data-sitekey="6LeYat8qAAAAAIjpYU-Yf9w1zoETvncsMjEi-skA"></div>

            <div class="form-contactpagina__inputelement">
                <input type="submit" value="Verstuur!">
            </div>

            <div class="form-contactpagina_inputelement">
                <input type="reset" />
            </div>

        </form>

    </section>
</div>


<script>
    const inputEmail = document.getElementById('email');

    const validateEmail = () => {
        if (inputEmail.validity.typeMismatch) {
            inputEmail.setCustomValidity("Voer een geldig e-mailadres in!");
            inputEmail.reportValidity();
        } else if (inputEmail.value.length > 80) {
            inputEmail.setCustomValidity("Email moet niet langer dan 80 tekens zijn!");
        } else {
            inputEmail.setCustomValidity("");
        }
    }

    const checkCaptcha = (e) => {
        //Get the captcha response and make sure it has more than zero characters
        const captchaResponse = grecaptcha.getResponse();
        if(!captchaResponse.length > 0) {
            throw new Error("Captcha not complete");
        }

        //Log the received data from the httpbin
        const fd = new FormData(e.target);
        const params = new URLSearchParams(fd);
        fetch('https://httpbin.org/post', {
            method: 'POST',
            body: params,
        })
        .then(res => res.json())
        .then(data => validateCaptcha(data))
        .catch(err => console.error(err))
    }

    const validateCaptcha = (req) => {
        const parameters = new URLSearchParams({
            secret: '6LeYat8qAAAAACqswrDbZx59LTX-jcSzuQo83dZ3',
            response: req.form['g-recaptcha-response'],
            remoteip: req.remoteip,
         })

        fetch('https://www.google.com/recaptcha/api/siteverify', {
            method: "POST",
            body: parameters,
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                res.json({ captchaSucces: true })
            } else {
                res.json({ captchaSucces: false })
            }
        })
    }

    const validateForm = (e) => {
        validateEmail();
        checkCaptcha(e);
    }

    // Event listener voor email
    // Aanbevolen events voor formulieren: https://github.com/Windesheim-HBO-ICT/client_studenten/blob/main/lessen/week-2/les-1/form-constraint-validation-api/studentversie/events-voor-invoer-validatie.md
    inputEmail.addEventListener("blur", validateEmail);
    inputEmail.addEventListener("input", validateEmail);

    // Selecteer het formelement
    const form = document.querySelector('.form-contactpagina');

    // Event listener voor formulierinzending
    form.addEventListener('submit', function (event) {
        event.preventDefault(); // Voorkom standaard formulierinzending

       // Valideer alle velden voor de zekerheid
        validateForm(event);

        // Verkrijg CSRF-token van het formulier
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Serialiseer formuliergegevens
        const formData = new URLSearchParams();

        formData.append('email', form.email.value);

        formData.append('subject', form.subject.value);

        formData.append('message', form.message.value);

        formData.append('__RequestVerificationToken', csrfToken); // Voeg CSRF-token toe

        // Voer een POST-verzoek uit
        fetch('/contact', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded' // Stel de inhoudstype in
            },
            body: formData // Stuur de geserialiseerde formuliergegevens als de body
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Netwerkrespons was niet ok');
                }
                return response.text();
            })
            .then(data => {
                // Verwerk succesvolle formulierinzending
                console.log('Formulier succesvol ingediend:', data);
                // Optioneel: je kunt hier een redirect uitvoeren of een succesbericht tonen
            })
            .catch(error => {
                console.error('Er was een probleem met de formulierinzending:', error);

                alert(error.message)

                // Verwerk fouten hier
            });
    });
</script>